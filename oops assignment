## Python OOP Assignment
Q1. What is the purpose of Python's OOP?
-- OOP's is basically used to incoperate access control. We can create a class and can define which object or user can access a particular class. We also can implement polymorphism, inheritance and various other concepts on class.

Q2. Where does an inheritance search look for an attribute?
-- It first searchs in its instace or the child clas if it is not present than it will go upwards towards the parent and search there.

Q3. How do you distinguish between a class object and an instance object?
-- class object is created using the class name. It is kind of class copy  and instance is created based on the class. 

Q4. What makes the first argument in a classâ€™s method function special?
-- first argument ie self which is more often used in class function defines the instance reference of tha object on which it is called.

Q5. What is the purpose of the init method?
-- init method is used to initiate or pass the parameters to the class. It is always claaed when the object is created automatically.

Q6. What is the process for creating a class instance?
-- for creating a class instance you need to assign the class name to the variabl which inturn calls the construcor of that class.

Q7. What is the process for creating a class?
-- class is basically created for encapsulation as well as it makes the code reusable.

Q8. How would you define the superclasses of a class?
-- whenever we create a child class for a particular class than super class defines the class by which the child is created referring it. All the meembers of that super r parent class can be resued in the child class.

Q9. What is the relationship between classes and modules?
-- modules can have multiple classes combined along with various other methos wheras class only contains the class emthods which are defined inside it.

Q10. How do you make instances and classes?
-- for creating any class we use a keyword class infront of the name using which you will be defining a class. For creating a instance of that class we need to assign the class name to a variable so that it creates a instance of that class.

Q11. Where and how should be class attributes created?
-- class attributes or class variables should be created inside the class and can be refferd by the class instance.

Q12. Where and how are instance attributes created?
-- Instance attribute is also define in the class but reffered with the instance of that class.

Q13. What does the term "self" in a Python class mean?
-- self is not a keyword rather it is used as a instance or reference variabl for that object on which it is called.

Q14. How does a Python class handle operator overloading?
-- 

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Q18. Describe three applications for exception processing.

Q19. What happens if you don't do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of  
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Q31. Explain Inheritance in Python with an example?

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of 
class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Q34.Explain the use of the 'nonlocal' keyword in Python.

Q35. What is the global keyword?
